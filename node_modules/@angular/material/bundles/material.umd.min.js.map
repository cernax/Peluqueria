{"version":3,"file":"material.umd.min.js","sources":["../../src/material/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/material/tabs/tabs-module.ts","../../src/material/toolbar/toolbar.ts","../../src/material/toolbar/toolbar-module.ts","../../src/material/tree/outlet.ts","../../src/material/tree/node.ts","../../src/material/tree/padding.ts","../../src/material/tree/tree.ts","../../src/material/tree/toggle.ts","../../src/material/tree/tree-module.ts","../../src/material/tree/data-source/flat-data-source.ts","../../src/material/tree/data-source/nested-data-source.ts","../../src/material/autocomplete/autocomplete-trigger.ts","../../src/material/core/month-constants.ts","../../src/material/datepicker/multi-year-view.ts","../../src/material/expansion/expansion-animations.ts","../../src/material/select/select.ts","../../src/material/tooltip/tooltip.ts","../../src/material/tabs/ink-bar.ts","../../src/material/tabs/tab-content.ts","../../src/material/tabs/tab-label.ts","../../src/material/tabs/tab.ts","../../src/material/tabs/tabs-animations.ts","../../src/material/tabs/tab-body.ts","../../src/material/tabs/tab-label-wrapper.ts","../../src/material/tabs/tab-header.ts","../../src/material/tabs/tab-group.ts","../../src/material/sort/sort-header.ts","../../src/material/sort/sort-module.ts","../../src/material/stepper/step-label.ts","../../src/material/stepper/stepper-intl.ts","../../src/material/stepper/step-header.ts","../../src/material/stepper/stepper-animations.ts","../../src/material/stepper/stepper-icon.ts","../../src/material/stepper/stepper.ts","../../src/material/stepper/stepper-button.ts","../../src/material/stepper/stepper-module.ts","../../src/material/table/table.ts","../../src/material/table/cell.ts","../../src/material/table/row.ts","../../src/material/table/text-column.ts","../../src/material/table/table-module.ts","../../src/material/table/table-data-source.ts","../../src/material/slider/slider.ts","../../src/material/slider/slider-module.ts","../../src/material/snack-bar/snack-bar-ref.ts","../../src/material/snack-bar/snack-bar-config.ts","../../src/material/snack-bar/simple-snack-bar.ts","../../src/material/snack-bar/snack-bar-animations.ts","../../src/material/snack-bar/snack-bar-container.ts","../../src/material/snack-bar/snack-bar-module.ts","../../src/material/snack-bar/snack-bar.ts","../../src/material/sort/sort.ts","../../src/material/sort/sort-animations.ts","../../src/material/sort/sort-header-intl.ts","../../src/material/sidenav/drawer.ts","../../src/material/sidenav/sidenav.ts","../../src/material/sidenav/sidenav-module.ts","../../src/material/slide-toggle/slide-toggle-config.ts","../../src/material/slide-toggle/slide-toggle.ts","../../src/material/slide-toggle/slide-toggle-module.ts","../../src/material/progress-spinner/progress-spinner.ts","../../src/material/progress-spinner/progress-spinner-module.ts","../../src/material/radio/radio.ts","../../src/material/radio/radio-module.ts","../../src/material/sidenav/drawer-animations.ts","../../src/material/select/select-module.ts","../../src/material/tooltip/tooltip-animations.ts","../../src/material/tooltip/tooltip-module.ts","../../src/material/paginator/paginator-intl.ts","../../src/material/paginator/paginator.ts","../../src/material/paginator/paginator-module.ts","../../src/material/progress-bar/progress-bar.ts","../../src/material/progress-bar/progress-bar-module.ts","../../src/material/menu/menu.ts","../../src/material/menu/menu-trigger.ts","../../src/material/menu/menu-module.ts","../../src/material/select/select-animations.ts","../../src/material/list/selection-list.ts","../../src/material/list/list-module.ts","../../src/material/menu/menu-animations.ts","../../src/material/menu/menu-content.ts","../../src/material/menu/menu-panel.ts","../../src/material/menu/menu-item.ts","../../src/material/list/list.ts","../../src/material/expansion/expansion-panel-header.ts","../../src/material/expansion/accordion.ts","../../src/material/expansion/expansion-module.ts","../../src/material/grid-list/grid-list-base.ts","../../src/material/grid-list/grid-tile.ts","../../src/material/grid-list/tile-coordinator.ts","../../src/material/grid-list/tile-styler.ts","../../src/material/grid-list/grid-list.ts","../../src/material/grid-list/grid-list-module.ts","../../src/material/icon/icon-registry.ts","../../src/material/icon/icon.ts","../../src/material/icon/icon-module.ts","../../src/material/datepicker/calendar.ts","../../src/material/datepicker/datepicker-animations.ts","../../src/material/datepicker/datepicker.ts","../../src/material/datepicker/datepicker-input.ts","../../src/material/datepicker/datepicker-toggle.ts","../../src/material/datepicker/datepicker-module.ts","../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts","../../src/material/expansion/accordion-base.ts","../../src/material/expansion/expansion-panel-content.ts","../../src/material/expansion/expansion-panel.ts","../../src/material/datepicker/calendar-body.ts","../../src/material/datepicker/month-view.ts","../../src/material/datepicker/year-view.ts","../../src/material/chips/chip-list.ts","../../src/material/chips/chip-input.ts","../../src/material/chips/chips-module.ts","../../src/material/dialog/dialog-config.ts","../../src/material/dialog/dialog-animations.ts","../../src/material/dialog/dialog-container.ts","../../src/material/dialog/dialog-ref.ts","../../src/material/dialog/dialog.ts","../../src/material/dialog/dialog-content-directives.ts","../../src/material/dialog/dialog-module.ts","../../src/material/input/autosize.ts","../../src/material/input/input-value-accessor.ts","../../src/material/input/input.ts","../../src/material/input/input-module.ts","../../src/material/datepicker/datepicker-intl.ts","../../src/material/card/card.ts","../../src/material/card/card-module.ts","../../src/material/checkbox/checkbox-config.ts","../../src/material/checkbox/checkbox.ts","../../src/material/checkbox/checkbox-required-validator.ts","../../src/material/checkbox/checkbox-module.ts","../../src/material/chips/chip.ts","../../src/material/chips/chip-default-options.ts","../../src/material/button/button.ts","../../src/material/button/button-module.ts","../../src/material/button-toggle/button-toggle.ts","../../src/material/button-toggle/button-toggle-module.ts","../../src/material/form-field/form-field.ts","../../src/material/form-field/form-field-module.ts","../../src/material/autocomplete/autocomplete.ts","../../src/material/autocomplete/autocomplete-origin.ts","../../src/material/autocomplete/autocomplete-module.ts","../../src/material/badge/badge.ts","../../src/material/badge/badge-module.ts","../../src/material/bottom-sheet/bottom-sheet-config.ts","../../src/material/bottom-sheet/bottom-sheet-animations.ts","../../src/material/bottom-sheet/bottom-sheet-container.ts","../../src/material/bottom-sheet/bottom-sheet-module.ts","../../src/material/bottom-sheet/bottom-sheet-ref.ts","../../src/material/bottom-sheet/bottom-sheet.ts","../../src/material/core/option/option.ts","../../src/material/core/option/index.ts","../../src/material/core/label/label-options.ts","../../src/material/form-field/error.ts","../../src/material/form-field/form-field-animations.ts","../../src/material/form-field/form-field-control.ts","../../src/material/form-field/hint.ts","../../src/material/form-field/label.ts","../../src/material/form-field/placeholder.ts","../../src/material/form-field/prefix.ts","../../src/material/form-field/suffix.ts","../../node_modules/tslib/tslib.es6.js","../../src/material/core/common-behaviors/common-module.ts","../../src/material/core/common-behaviors/disabled.ts","../../src/material/core/common-behaviors/color.ts","../../src/material/core/common-behaviors/disable-ripple.ts","../../src/material/core/common-behaviors/tabindex.ts","../../src/material/core/common-behaviors/error-state.ts","../../src/material/core/common-behaviors/initialized.ts","../../src/material/core/datetime/date-adapter.ts","../../src/material/core/datetime/native-date-adapter.ts","../../src/material/core/line/line.ts","../../src/material/core/ripple/ripple-renderer.ts","../../src/material/form-field/form-field-errors.ts","../../src/material/input/input-errors.ts","../../src/material/datepicker/datepicker-errors.ts","../../src/material/menu/menu-errors.ts","../../src/material/select/select-errors.ts","../../src/material/sort/sort-errors.ts","../../src/material/core/version.ts","../../src/material/core/animation/animation.ts","../../src/material/core/datetime/date-formats.ts","../../src/material/core/datetime/native-date-formats.ts","../../src/material/core/datetime/index.ts","../../src/material/core/error/error-options.ts","../../src/material/core/gestures/gesture-config.ts","../../src/material/core/ripple/ripple-ref.ts","../../src/material/core/ripple/ripple.ts","../../src/material/core/ripple/index.ts","../../src/material/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/material/core/selection/index.ts","../../src/material/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nclass MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {}\nconst _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(\n      private _tabNavBar: MatTabNav, public _elementRef: ElementRef, ngZone: NgZone,\n      platform: Platform,\n      @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalRippleOptions: RippleGlobalOptions|null,\n      @Attribute('tabindex') tabIndex: string, private _focusMonitor: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    _focusMonitor.monitor(_elementRef);\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nclass MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nconst _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F>,\n              private _treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ConnectedPosition,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    '[attr.aria-haspopup]': '!autocompleteDisabled',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnChanges, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n   * will render the panel underneath the trigger if there is enough space for it to fit in\n   * the viewport, otherwise the panel will be shown above it. If the position is set to\n   * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n   * whether it fits completely in the viewport.\n   */\n  @Input('matAutocompletePosition') position: 'auto' | 'above' | 'below' = 'auto';\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef!.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    return merge(\n      fromEvent(this._document, 'click') as Observable<MouseEvent>,\n      fromEvent(this._document, 'touchend') as Observable<TouchEvent>\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n        .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n              const wasOpen = this.panelOpen;\n              this._resetActiveItem();\n              this.autocomplete._setVisibility();\n\n              if (this.panelOpen) {\n                this._overlayRef!.updatePosition();\n\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                  this.autocomplete.opened.emit();\n                }\n              }\n\n              return this.panelClosingActions;\n            }),\n            // when the first closing event occurs...\n            take(1))\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false);\n\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  private _setStrategyPositions(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const belowPosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    };\n    const abovePosition: ConnectedPosition = {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      panelClass: 'mat-autocomplete-panel-above'\n    };\n\n    let positions: ConnectedPosition[];\n\n    if (this.position === 'above') {\n      positions = [abovePosition];\n    } else if (this.position === 'below') {\n      positions = [belowPosition];\n    } else {\n      positions = [belowPosition, abovePosition];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n  OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger, {static: false}) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_LOADER, HammerLoader} from '@angular/platform-browser';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy, OnInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Setup styling-specific things\n   */\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE && !hasModifierKey(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {}\nconst _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel, {static: false}) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef, static: true})\n  _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef, {static: true}) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective, {static: false}) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (_dir) {\n      this._dirChangeSubscription = _dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {}\nconst _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nclass MatTabHeaderBase {}\nconst _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar, {static: true}) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer', {static: true}) _tabListContainer: ElementRef;\n  @ViewChild('tabList', {static: true}) _tabList: ElementRef;\n  @ViewChild('nextPaginator', {static: false}) _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator', {static: false}) _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _platform: Platform) {\n    super();\n\n    // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n    _ngZone.runOutsideAngular(() => {\n      fromEvent(_elementRef.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    });\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      this._ngZone.run(() => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/components/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    if (platform.TRIDENT || platform.EDGE) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper', {static: false}) _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader', {static: false}) _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  /** Whether the ripple should be disabled. */\n  @Input() disableRipple: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the step header. */\n  focus() {\n    this._focusMonitor.focusVia(this._elementRef, 'program');\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  _getDefaultTextForState(state: StepState): string {\n    if (state == 'number') {\n      return `${this.index + 1}`;\n    }\n    if (state == 'edit') {\n      return 'create';\n    }\n    if (state == 'error') {\n      return 'warning';\n    }\n    return state;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel, {static: false}) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({selector: '[matStepper]', providers: [{provide: CdkStepper, useExisting: MatStepper}]})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether ripples should be disabled for the step headers. */\n  @Input() disableRipple: boolean;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatHorizontalStepper},\n    {provide: CdkStepper, useExisting: MatHorizontalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [\n    {provide: MatStepper, useExisting: MatVerticalStepper},\n    {provide: CdkStepper, useExisting: MatVerticalStepper}\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {Directive} from '@angular/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperNext extends CdkStepperNext {\n}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '[type]': 'type',\n  },\n  inputs: ['type']\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  providers: [{provide: CdkTable, useExisting: MatTable}],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkFooterRow,\n  CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef\n} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow {\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow {\n}\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  // See note on CdkTable for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextColumn} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-text-column',\n  template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  // Change detection is intentionally not set to OnPush. This component's template will be provided\n  // to the table to be inserted into its view. This is problematic when change detection runs since\n  // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n  // mean's the template in the table's view will not have the updated value (and in fact will cause\n  // an ExpressionChangedAfterItHasBeenCheckedError).\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MatTextColumn<T> extends CdkTextColumn<T> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {MatTextColumn} from './text-column';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directives\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n\n  MatTextColumn,\n];\n\n@NgModule({\n  imports: [\n    CdkTableModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription,\n  Subject,\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /** Used to react to internal changes of the paginator that are made by the data source itself. */\n  private readonly _internalPageChanges = new Subject<void>();\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge(this._sort.sortChange, this._sort.initialized) as Observable<Sort|void> :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge(\n          this._paginator.page,\n          this._internalPageChanges,\n          this._paginator.initialized\n        ) as Observable<PageEvent|void> :\n        observableOf(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) { return; }\n\n      paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper', {static: false}) private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent, {static: false}) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent, {static: false}) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this.updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        const width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        const width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent, {static: false}) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer', {static: false}) _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar', {static: false}) _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation) {\n      const trackedDiameters = MatProgressSpinner._diameters;\n      const diametersForElement = trackedDiameters.get(this._styleRoot);\n\n      if (!diametersForElement || !diametersForElement.has(this._diameter)) {\n        this._attachStyleNode();\n      }\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._styleRoot = _getShadowRoot(_elementRef.nativeElement, _document) || _document.head;\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleTag: HTMLStyleElement = this._document.createElement('style');\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n    styleTag.textContent = this._getAnimationText();\n    styleRoot.appendChild(styleTag);\n\n    if (!diametersForElement) {\n      diametersForElement = new Set<number>();\n      diameters.set(styleRoot, diametersForElement);\n    }\n\n    diametersForElement.add(currentDiameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement, _document: Document): Node | null {\n  // TODO(crisbeto): see whether we should move this into the CDK\n  // feature detection utilities once #15616 gets merged in.\n  if (typeof window !== 'undefined') {\n    const head = _document.head;\n\n    // Check whether the browser supports Shadow DOM.\n    if (head && ((head as any).createShadowRoot || head.attachShadow)) {\n      const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n      // We need to take the `ShadowRoot` off of `window`, because the built-in types are\n      // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\n      if (rootNode instanceof (window as any).ShadowRoot) {\n        return rootNode;\n      }\n    }\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription, Observable} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this._emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar', {static: false}) _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        const element = this._primaryValueBar.nativeElement;\n\n        this._animationEndSubscription =\n            (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n              .pipe(filter(((e: TransitionEvent) => e.target === element)))\n              .subscribe(() => this._ngZone.run(() => this._emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private _emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n/** Base class with all of the `MatMenu` functionality. */\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent, {static: false}) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._resetMenu()\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {_MatMenu} from './menu';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._destroyed) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritte.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    // Use the `id=\"iconName\"` syntax in order to escape special\n    // characters in the ID (versus using the #iconName syntax).\n    const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatIconMixinBase: CanColorCtor & typeof MatIconBase = mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView, {static: false}) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView, {static: false}) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView, {static: false}) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar, {static: false}) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'aria-haspopup': 'dialog',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon, {static: false}) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button', {static: false}) _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent, {static: false}) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body', {static: false}) _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody, {static: false}) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    } else {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n      const firstOption: HTMLOptionElement | undefined = selectElement.options[0];\n\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty ||\n             !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-card',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  }\n})\nexport class MatCard {\n  // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {}\n}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input', {static: false}) _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar, {static: false}) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon, {static: false}) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove), {static: false}) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple, {static: false}) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle,\n                    select: boolean,\n                    isUserInput = false,\n                    deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n\n  /** Syncs up the group's value with the model and emits the change event. */\n  private _updateModelValue(isUserInput: boolean) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.name]': 'null',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button', {static: false}) _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline', {static: false}) underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer', {static: false}) _inputContainerRef: ElementRef;\n  @ViewChild('label', {static: false}) private _label: ElementRef;\n\n  @ContentChild(MatFormFieldControl, {static: false}) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this hacky workaround in order to support both Ivy\n    // and ViewEngine. We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel, {static: false}) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  get _labelChild() {\n    return this._labelChildNonStatic || this._labelChildStatic;\n  }\n\n  @ContentChild(MatPlaceholder, {static: false}) _placeholderChild: MatPlaceholder;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this.updateOutlineGap());\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  // The @ViewChild query for TemplateRef here needs to be static because some code paths\n  // lead to the overlay being created before change detection has finished for this component.\n  // Notably, another component may trigger `focus` on the autocomplete-trigger.\n\n  /** @docs-private */\n  @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel', {static: false}) panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      this._classList = value.split(' ').reduce((classList, className) => {\n        classList[className.trim()] = true;\n        return classList;\n      }, {} as {[key: string]: boolean});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  private _setVisibilityClasses(classList: {[key: string]: boolean}) {\n    classList['mat-autocomplete-visible'] = this.showPanel;\n    classList['mat-autocomplete-hidden'] = !this.showPanel;\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\nimport {InjectionToken, ViewContainerRef} from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // Note that this is disabled by default, because while the a11y recommendations are to focus\n  // the first focusable element, doing so prevents screen readers from reading out the\n  // rest of the bottom sheet content.\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = false;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the bottom sheet. */\n  scrollStrategy?: ScrollStrategy;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible') {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    if (this.bottomSheetConfig.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Whether the user is allowed to close the bottom sheet. */\n  disableClose: boolean | undefined;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n    this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged\n        .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n        .subscribe(() => {\n          _overlayRef.dispose();\n        });\n\n    _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    merge(\n      _overlayRef.backdropClick(),\n      _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(event => {\n      if (!this.disableClose &&\n        (event.type !== 'keydown' || !hasModifierKey(event as KeyboardEvent))) {\n        event.preventDefault();\n        this.dismiss();\n      }\n    });\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': '_getAriaSelected()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /**\n   * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n   * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n   * attributes adds a significant amount of noise to screen-reader users without providing useful\n   * information.\n   */\n  _getAriaSelected(): boolean|null {\n    return this.selected || (this.multiple ? false : null);\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode, Version} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {VERSION as CDK_VERSION} from '@angular/cdk';\n\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION = new Version('8.0.1-86c626a');\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._checkCdkVersionMatch();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether the material version matches the cdk version */\n  private _checkCdkVersionMatch(): void {\n    if (VERSION.full !== CDK_VERSION.full) {\n      console.warn(\n          'The Angular Material version (' + VERSION.full + ') does not match ' +\n          'the Angular CDK version (' + CDK_VERSION.full + ').\\n' +\n          'Please ensure the versions of these two packages exactly match.'\n      );\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\n} catch {\n  SUPPORTS_INTL_API = false;\n}\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return new Date(date.getTime());\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this._onMousedown)\n        .set('mouseup', this._onPointerUp)\n        .set('mouseleave', this._onPointerUp)\n\n        .set('touchstart', this._onTouchStart)\n        .set('touchend', this._onPointerUp)\n        .set('touchcancel', this._onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this._runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-run the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this._runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private _onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private _onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private _onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private _runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('8.0.1-86c626a');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions?: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase { }\nconst _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["enumerable","configurable","this","_focusMonitor","stopMonitoring","_elementRef","MatTabLink","decorators","type","Directive","args","exportAs","inputs","host","class","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","NgZone","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","propDecorators","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabNav","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","selector","MatToolbar","_super","elementRef","_platform","document","_this","call","_document","tslib_1.__extends","prototype","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","nativeElement","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","Component","template","styles","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","CDK_TREE_NODE_OUTLET_NODE","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","tabIndex","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","IterableDiffers","nodeOutlet","ContentChildren","descendants","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","MatTreeNodeToggle","apply","arguments","recursive","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","CdkTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","MatTreeNestedDataSource","SELECT_PANEL_PADDING_X","show","style","visibility","hide","_setStyles","element","positions","_inkBarPositioner","inkBar","left","width","_MAT_INK_BAR_POSITIONER","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","static","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","_changeDetectorRef","_viewportRuler","_ngZone","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","newFocusIndex","_setTabFocus","_previousPaginator","_handlePaginatorPress","_nextPaginator","_onContentChanges","_currentTextContent","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","platform","translateX","_tabList","Math","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","viewLength","scrollAmount","_handlePaginatorClick","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","timer","_a","maxScrollDistance","distance","max","min","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","InjectionToken","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_animationDuration","test","_backgroundColor","remove","backgroundColor","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","_onDestroy","updateActiveLink","_activeLinkChanged","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","ngZone","globalRippleOptions","_tabLinkRipple","setupTriggerEvents","rippleConfig","parseInt","monitor","get","_isActive","(click)","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","allowChildren","MatSort","MatSortHeader","start","disableClear","MatSortModule","MAT_SORT_HEADER_INTL_PROVIDER","MatStepLabel","CdkStepLabel","MatStepperIntl","optionalLabel","Injectable","providedIn","MAT_STEPPER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intl","_intlSubscription","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","optional","_getDefaultTextForState","errorMessage","iconOverrides","selected","disableRipple","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","name","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","CdkStepper","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","MatFooterRow","Default","CdkFooterRow","MatRow","CdkRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","CdkTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex","factory","_MAT_INK_BAR_POSITIONER_FACTORY","trackSize","vertical","_sliderDimensions","pixelsPerStep","step","stepsPerTick","pixelsPerTick","_tickIntervalPercent","tickInterval","MatSlider","MatSliderChange","source","_calculatePercentage","_calculateValue","percentage","_clamp","_getSliderDimensions","_sliderWrapper","getBoundingClientRect","_focusHostElement","_blurHostElement","blur","writeValue","registerOnChange","fn","_controlValueAccessorChangeFn","registerOnTouched","onTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","thumbLabel","displayWith","input","valueChange","MatSliderModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","MatSnackBarModule","OverlayModule","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","_disableClear","v","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","keyframes","query","animateChild","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","_renderArrow","MatDrawerContainer","_validateDrawers","drawer","_drawers","_isDrawerOpen","_start","_end","updateContentMargins","_doCheckSubject","debounceTime","_contentMarginChanges","close","_left","mode","_width","_right","opened","_contentMargins","ngDoCheck","_element","openedChange","_setContainerClass","onPositionChanged","throwMatDuplicatedDrawerError","_onBackdropClicked","backdropClick","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","[class.mat-drawer-container-explicit-backdrop]","MatDrawer","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","matDrawerAnimations","transformDrawer","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","stopPropagation","_inputElement","_emitChangeEvent","_onInputClick","toggle","_getDragPercentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_roundToDecimal","toString","split","pop","parseFloat","toFixed","invert","percent","_isMinValue","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_updateTickIntervalPercent","_onMousedown","button","oldValue","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","closestValue","_strokeCircumference","_fallbackAnimation","MatProgressSpinner","strokeWidth","diameter","_attachStyleNode","styleTag","createElement","styleRoot","_styleRoot","currentDiameter","_diameter","diameters","_diameters","diametersForElement","setAttribute","_getAnimationText","appendChild","Set","INDETERMINATE_ANIMATION_TEMPLATE","replace","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MatSpinner","animationMode","MatProgressSpinnerModule","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","_markForCheck","isAlreadySelected","MatRadioButton","color","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","_animationEnd","_opened","_modeChanged","autoFocus","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","_enableAnimations","destroy","_animationStarted","isOpen","openedVia","HostBinding","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","HostListener","_animationDoneListener","viewportRuler","_autosize","defaultAutosize","_backdropOverride","sortComparator","selectionChange","MatSelect","MatSelectModule","MatOptionModule","MatFormFieldModule","MatSelectTrigger","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","elementStyle","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","floor","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","MatProgressBar","location","_isNoopAnimation","_bufferValue","animationEnd","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","_emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","_primaryValueBar","target","aria-valuemin","aria-valuemax","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","trackedDiameters","head","_getShadowRoot","_noopAnimations","_forceAnimations","animationClass","_strokeWidth","viewBox","_circleRadius","PI","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenu","_MatMenu","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","toggleMenu","closeMenu","openMenu","_setPosition","hasBackdrop","_getPortal","lazyContent","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_attached","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","backdropClass","setPositionClasses","posX","connectionPair","posY","xPosition","originFallbackX","_b","yPosition","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","_isAnimating","aria-haspopup","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuContent","MatMenuModule","matSelectAnimations","transformPanelWrap","transformPanel","minWidth","fadeInContent","SELECT_MULTIPLE_PANEL_PADDING_X","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","options","switchMap","option","onSelectionChange","onStable","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","_triggerRect","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","selectedOption","activeItem","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatListOption","_setSelected","selectionList","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-with-avatar]","[attr.aria-selected]","MatSelectionList","_lines","MatLine","_text","checkboxPosition","_markOptionsForCheck","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","item","disableRippleChanges","colorChanges","firstChange","optionIndex","previousFocusIndex","hasModifier","_toggleFocusedOption","_getSelectedOptionValues","values","focusedIndex","focusedOption","hasChanged","_reportValueChange","aria-multiselectable","MAT_SELECTION_LIST_VALUE_ACCESSOR","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","MatMenuItemBase","_MatMenuItemMixinBase","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_MatMenuBase","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","startsWith","_previousElevation","_onAnimationDone","_onAnimationStart","defaultOptions","_isInteractiveList","navList","list","_getListType","_list","setLines","[class.mat-list-item-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","_hasFocus","hadFocus","newActiveItem","_removeOptionFromList","_handleFocus","_setFocusedOption","_handleBlur","[attr.aria-controls]","[class.mat-expanded]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","[@expansionHeight]","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanelHeader","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_hideToggle","displayMode","togglePosition","_headers","_handleHeaderKeydown","_handleHeaderFocus","header","MAT_ACCORDION","hideToggle","CdkAccordion","MatExpansionModule","CdkAccordionModule","MatExpansionPanel","MatExpansionPanelActionRow","MatExpansionPanelContent","MAT_GRID_LIST","MatGridTile","_gridList","_rowspan","_colspan","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIconChanges","svgIcon","_setSvgElement","log","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","[class.mat-icon-no-color]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","startAt","minDate","maxDate","dateFilter","dateClass","selectedChange","yearSelected","monthSelected","_userSelection","monthView","MatMonthView","yearView","MatYearView","multiYearView","MatMultiYearView","MatCalendar","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_dateAdapter","createMissingDateImplError","MatDatepicker","_startAt","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","_setColor","_createPopup","datepicker","getConnectedOverlayOrigin","componentInstance","MatDialog","DateAdapter","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","_customIcon","_button","MatDatepickerModule","MatDialogModule","MatCalendarBody","MatCalendarHeader","MatDatepickerIntl","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","uniqueId","accordion","_uniqueSelectionDispatcher","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","_togglePosition","_hasSpacing","expanded","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","useValue","[class.mat-expansion-panel-spacing]","_parentChangeSubscription","accordionHideToggleChange","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_keydown","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","view","_getCurrentViewComponent","headerComponent","MatChipList","_listenToChipsFocus","_chipFocusSubscription","chipFocusChanges","chipIndex","chips","chip","_chipBlurSubscription","chipBlurChanges","_blur","_listenToChipsRemoved","_chipRemoveSubscription","chipRemoveChanges","_lastDestroyedChipIndex","_originatesFromChip","currentElement","parentElement","_hasFocusedChip","_syncChipsState","_chipListMultiple","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","TAB","_allowFocusEscape","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","ariaLabelledBy","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","addPanelClass","removePanelClass","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","overlayContainer","getContainerElement","siblings","sibling","hasAttribute","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","MatInputModule","TextFieldModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","columnChanges","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","cellNumber","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_indeterminate","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","ripple","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","_animationsDisabled","coercedValue","_dispatchSelectionChange","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_tabIndex","_userTabIndex","_chipInput","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsSelection","_chipSelectionSubscription","chipSelectionChanges","MatButton","MatAnchor","focusMonitor","stopImmediatePropagation","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","appearance","_buttonToggles","_syncButtonToggle","deferEvents","_updateModelValue","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.name]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","MAT_LABEL_GLOBAL_OPTIONS","MAT_FORM_FIELD_DEFAULT_OPTIONS","hideRequiredMarker","hintLabel","floatLabel","underlineRef","_connectionContainerRef","_inputContainerRef","_controlStatic","_labelChildNonStatic","MatLabel","_labelChildStatic","_placeholderChild","MatPlaceholder","_errorChildren","MatError","_hintChildren","MatHint","_prefixChildren","MatPrefix","_suffixChildren","MatSuffix","_MatFormFieldMixinBase","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","showPanel","_isOpen","optionSelected","_autoActiveFirstOption","autoActiveFirstOption","_setVisibilityClasses","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_positionStrategy","_setStrategyPositions","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","setOrigin","_getConnectedElement","_getPanelWidth","withPush","belowPosition","abovePosition","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","[attr.aria-haspopup]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_overlap","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","_hidden","isAbove","isAfter","contentChange","_updateTextContent","description","destroyNode","getBadgeElement","_createBadgeElement","_clearExistingBadges","oldDescription","colorPalette","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getAriaSelected","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatFormFieldBase","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_hideRequiredMarker","_processHints","_explicitFormFieldControl","_controlNonStatic","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerRect","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-has-label]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","createShadowRoot","attachShadow","rootNode","getRootNode","sortOrder","SUPPORTS_INTL_API","setPrototypeOf","__proto__","__assign","assign","s","n","VERSION","Version","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","full","CDK_VERSION","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","getTime","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleRef","RippleState","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","_onTouchStart","touches","changedTouches","_onPointerUp","terminateOnPointerUp","persistent","_containerElement","_containerRect","animationConfig","animation","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","globalOptions","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}